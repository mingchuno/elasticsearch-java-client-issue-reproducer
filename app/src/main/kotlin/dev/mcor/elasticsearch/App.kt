/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.mcor.elasticsearch

import co.elastic.clients.elasticsearch.ElasticsearchClient
import co.elastic.clients.json.jackson.JacksonJsonpMapper
import co.elastic.clients.transport.ElasticsearchTransport
import co.elastic.clients.transport.rest_client.RestClientTransport
import org.apache.http.HttpHost
import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.impl.client.BasicCredentialsProvider
import org.elasticsearch.client.RestClient

fun main() {
    val credentialsProvider =
        BasicCredentialsProvider().apply {
            setCredentials(AuthScope.ANY, UsernamePasswordCredentials("elastic", "password"))
        }
    // Create the low-level client
    val restClient: RestClient =
        RestClient.builder(HttpHost("localhost", 9200))
            .setHttpClientConfigCallback { httpClientBuilder ->
                httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)
            }
            .build()

    // Create the transport with a Jackson mapper
    val transport: ElasticsearchTransport = RestClientTransport(restClient, JacksonJsonpMapper())

    // And create the API client
    val client = ElasticsearchClient(transport)

    client.security().user.also { println(it) }

    client.security().role.also { println(it) }
}
